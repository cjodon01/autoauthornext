-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.admin_users (
  user_id uuid NOT NULL,
  CONSTRAINT admin_users_pkey PRIMARY KEY (user_id),
  CONSTRAINT admin_users_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.ai_models (
  min_tier text DEFAULT 'free'::text CHECK (min_tier = ANY (ARRAY['free'::text, 'starter'::text, 'pro'::text, 'team'::text, 'enterprise'::text])),
  model_name text NOT NULL,
  model_type text NOT NULL CHECK (model_type = ANY (ARRAY['text_generation'::text, 'image_generation'::text])),
  provider_id uuid NOT NULL,
  max_tokens_default integer,
  temperature_default numeric,
  strengths_description text,
  best_use_cases text,
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  is_active boolean NOT NULL DEFAULT true,
  pricing text,
  status text DEFAULT 'active'::text,
  model_id text,
  api_model_id text,
  cost integer,
  provider text DEFAULT 'openai'::text,
  CONSTRAINT ai_models_pkey PRIMARY KEY (id),
  CONSTRAINT ai_models_provider_id_fkey FOREIGN KEY (provider_id) REFERENCES public.ai_providers(id)
);
CREATE TABLE public.ai_providers (
  provider_name text NOT NULL UNIQUE,
  api_key text NOT NULL,
  api_base_url text NOT NULL,
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  status text DEFAULT 'active'::text,
  CONSTRAINT ai_providers_pkey PRIMARY KEY (id)
);
CREATE TABLE public.analytics_data (
  post_id uuid NOT NULL,
  campaign_id uuid,
  platform text NOT NULL,
  impressions integer,
  clicks integer,
  likes integer,
  shares integer,
  comments integer,
  engagement_rate numeric,
  metrics_json jsonb,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  fetched_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT analytics_data_pkey PRIMARY KEY (id),
  CONSTRAINT analytics_data_campaign_id_fkey FOREIGN KEY (campaign_id) REFERENCES public.campaigns(id),
  CONSTRAINT analytics_data_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts_log(id)
);
CREATE TABLE public.blog_posts (
  ai_provider text,
  ai_model text,
  slug text UNIQUE,
  image_url text,
  content_markdown text,
  embed_url text,
  user_id uuid,
  brand_id uuid,
  campaign_id uuid,
  title text NOT NULL,
  content_html text NOT NULL,
  preview_text text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  status text DEFAULT 'published'::text CHECK (status = ANY (ARRAY['published'::text, 'draft'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT blog_posts_pkey PRIMARY KEY (id),
  CONSTRAINT blog_posts_campaign_id_fkey FOREIGN KEY (campaign_id) REFERENCES public.campaigns(id),
  CONSTRAINT blog_posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT blog_posts_brand_id_fkey FOREIGN KEY (brand_id) REFERENCES public.brands(id)
);
CREATE TABLE public.brand_assets (
  brand_id uuid NOT NULL,
  content text NOT NULL,
  source text,
  asset_type text,
  file_url text,
  metadata jsonb,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  embedding USER-DEFINED,
  CONSTRAINT brand_assets_pkey PRIMARY KEY (id),
  CONSTRAINT brand_assets_brand_id_fkey FOREIGN KEY (brand_id) REFERENCES public.brands(id)
);
CREATE TABLE public.brand_users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  role text NOT NULL DEFAULT 'editor'::text CHECK (role = ANY (ARRAY['viewer'::text, 'editor'::text, 'owner'::text])),
  brand_id uuid NOT NULL,
  user_id uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  invited_by uuid,
  CONSTRAINT brand_users_pkey PRIMARY KEY (id),
  CONSTRAINT brand_users_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT brand_users_invited_by_fkey FOREIGN KEY (invited_by) REFERENCES auth.users(id),
  CONSTRAINT brand_users_brand_id_fkey FOREIGN KEY (brand_id) REFERENCES public.brands(id)
);
CREATE TABLE public.brands (
  secondary_color text,
  site_url text,
  facebook_page_id uuid,
  instagram_page_id uuid,
  twitter_page_id uuid,
  linkedin_page_id uuid,
  type text DEFAULT 'individual'::text CHECK (type = ANY (ARRAY['individual'::text, 'business'::text])),
  user_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  mission_statement text,
  usp_statement text,
  brand_persona_description text,
  core_values ARRAY,
  brand_keywords_include ARRAY,
  target_audience text,
  brand_keywords_exclude ARRAY,
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  brand_voice text,
  industry text,
  reddit_page_id uuid,
  facebook_account_id uuid,
  instagram_account_id uuid,
  twitter_account_id uuid,
  linkedin_account_id uuid,
  reddit_account_id uuid,
  primary_color text,
  CONSTRAINT brands_pkey PRIMARY KEY (id),
  CONSTRAINT brands_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT fk_brands_facebook_account FOREIGN KEY (facebook_account_id) REFERENCES public.social_connections(id),
  CONSTRAINT fk_brands_linkedin_account FOREIGN KEY (linkedin_account_id) REFERENCES public.social_connections(id),
  CONSTRAINT fk_brands_facebook_page FOREIGN KEY (facebook_page_id) REFERENCES public.social_pages(id),
  CONSTRAINT fk_brands_instagram_page FOREIGN KEY (instagram_page_id) REFERENCES public.social_pages(id),
  CONSTRAINT fk_brands_twitter_page FOREIGN KEY (twitter_page_id) REFERENCES public.social_pages(id),
  CONSTRAINT fk_brands_reddit_account FOREIGN KEY (reddit_account_id) REFERENCES public.social_connections(id),
  CONSTRAINT fk_brands_twitter_account FOREIGN KEY (twitter_account_id) REFERENCES public.social_connections(id),
  CONSTRAINT fk_brands_instagram_account FOREIGN KEY (instagram_account_id) REFERENCES public.social_connections(id),
  CONSTRAINT fk_brands_linkedin_page FOREIGN KEY (linkedin_page_id) REFERENCES public.social_pages(id)
);
CREATE TABLE public.campaigns (
  campaign_type text NOT NULL DEFAULT 'general'::text CHECK (campaign_type = ANY (ARRAY['general'::text, 'journey'::text])),
  journey_start_date date,
  journey_duration_days integer,
  journey_map jsonb,
  current_journey_day integer,
  previous_post text,
  brand_id uuid,
  target_audience_specific jsonb,
  target_audience_psychographics text,
  negative_constraints_campaign text,
  cta_link text,
  post_length_type USER-DEFINED,
  goal text,
  cta_action text,
  ai_tone_preference ARRAY,
  start_date date,
  duration_days integer,
  key_milestones ARRAY,
  target_audience_journey text,
  ai_model_for_journey_map uuid,
  ai_content_style_preference ARRAY,
  end_date date,
  ai_model_for_general_campaign uuid,
  ai_intent text,
  platforms text,
  user_id uuid NOT NULL,
  campaign_name text NOT NULL,
  schedule_cron text,
  next_run_at timestamp with time zone,
  ai_extra_metadata jsonb,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  page_id uuid,
  ai_tone text,
  timezone text DEFAULT 'UTC'::text CHECK (timezone IS NULL OR timezone ~ '^[A-Za-z_]+/[A-Za-z_]+$|^UTC$|^GMT[+-]\d{1,2}$'::text),
  status text NOT NULL DEFAULT 'active'::text,
  last_run_at timestamp with time zone,
  social_id uuid,
  description text,
  target_platforms ARRAY,
  target_page_ids ARRAY,
  target_connection_ids ARRAY,
  ai_posting_frequency text DEFAULT 'daily'::text,
  CONSTRAINT campaigns_pkey PRIMARY KEY (id),
  CONSTRAINT campaigns_ai_model_for_general_campaign_fkey FOREIGN KEY (ai_model_for_general_campaign) REFERENCES public.ai_models(id),
  CONSTRAINT fk_ai_model_for_journey_map FOREIGN KEY (ai_model_for_journey_map) REFERENCES public.ai_models(id),
  CONSTRAINT campaigns_brand_id_fkey FOREIGN KEY (brand_id) REFERENCES public.brands(id),
  CONSTRAINT campaigns_social_id_fkey FOREIGN KEY (social_id) REFERENCES public.social_connections(id),
  CONSTRAINT campaigns_page_id_fkey FOREIGN KEY (page_id) REFERENCES public.social_pages(id),
  CONSTRAINT campaigns_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(user_id)
);
CREATE TABLE public.developer_users (
  user_id uuid NOT NULL,
  CONSTRAINT developer_users_pkey PRIMARY KEY (user_id),
  CONSTRAINT developer_users_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.facebook_api_logs (
  user_id uuid,
  endpoint text NOT NULL,
  action_type text NOT NULL,
  request_body jsonb,
  response_body jsonb,
  error_message text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  method text NOT NULL DEFAULT 'GET'::text,
  response_code integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT facebook_api_logs_pkey PRIMARY KEY (id),
  CONSTRAINT facebook_api_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.generated_media_posts (
  brand_id uuid NOT NULL,
  prompt text NOT NULL,
  content_type text NOT NULL,
  generated_image_url text,
  image_description text,
  overlay_text text,
  video_idea_data jsonb,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  embedding USER-DEFINED,
  overlay_options text,
  CONSTRAINT generated_media_posts_pkey PRIMARY KEY (id),
  CONSTRAINT generated_media_posts_brand_id_fkey FOREIGN KEY (brand_id) REFERENCES public.brands(id)
);
CREATE TABLE public.journal_entries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  journal_type text NOT NULL DEFAULT 'general'::text,
  user_id uuid NOT NULL,
  brand_id uuid,
  title text,
  content_text text,
  content_html text,
  audio_url text,
  audio_transcript text,
  handwriting_data jsonb,
  ai_summary text,
  ai_social_post text,
  ai_blog_post text,
  mood text,
  tags ARRAY,
  ai_processing_status text DEFAULT 'pending'::text,
  is_private boolean DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT journal_entries_pkey PRIMARY KEY (id),
  CONSTRAINT journal_entries_brand_id_fkey FOREIGN KEY (brand_id) REFERENCES public.brands(id),
  CONSTRAINT journal_entries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.oauth_states (
  state text NOT NULL UNIQUE,
  provider text NOT NULL,
  user_id uuid NOT NULL,
  code_verifier text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT oauth_states_pkey PRIMARY KEY (id)
);
CREATE TABLE public.posts (
  post_content text,
  status text DEFAULT 'pending'::text,
  updated_at text,
  campaign_id uuid NOT NULL,
  post_date timestamp with time zone NOT NULL,
  ai_model_used text,
  ai_prompt_used text,
  approved boolean NOT NULL DEFAULT true,
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  target_platforms ARRAY,
  target_page_ids ARRAY,
  target_connection_ids ARRAY,
  CONSTRAINT posts_pkey PRIMARY KEY (id),
  CONSTRAINT posts_campaign_id_fkey FOREIGN KEY (campaign_id) REFERENCES public.campaigns(id)
);
CREATE TABLE public.posts_log (
  post_id text UNIQUE,
  connection_id uuid,
  platform text,
  campaign_id uuid,
  page_id uuid,
  generated_content text NOT NULL,
  ai_prompt_used text,
  posted_at timestamp with time zone,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  likes_count integer DEFAULT 0,
  comments_count integer DEFAULT 0,
  shares_count integer DEFAULT 0,
  views_count integer DEFAULT 0,
  clicks_count integer DEFAULT 0,
  reach_count integer DEFAULT 0,
  impressions_count integer DEFAULT 0,
  engagement_rate numeric DEFAULT 0.00,
  social_page_id uuid,
  CONSTRAINT posts_log_pkey PRIMARY KEY (id),
  CONSTRAINT posts_log_campaign_id_fkey FOREIGN KEY (campaign_id) REFERENCES public.campaigns(id),
  CONSTRAINT posts_log_page_id_fkey FOREIGN KEY (page_id) REFERENCES public.social_pages(id),
  CONSTRAINT fk_posts_log_social_page FOREIGN KEY (social_page_id) REFERENCES public.social_pages(id),
  CONSTRAINT posts_log_social_page_id_fkey FOREIGN KEY (social_page_id) REFERENCES public.social_pages(id)
);
CREATE TABLE public.products (
  id text NOT NULL,
  name text,
  default_price text,
  tax_code text,
  created_at timestamp without time zone,
  updated_at timestamp without time zone,
  active boolean,
  token_count integer,
  type text,
  price numeric,
  CONSTRAINT products_pkey PRIMARY KEY (id)
);
CREATE TABLE public.profiles (
  tier text DEFAULT 'free'::text CHECK (tier = ANY (ARRAY['free'::text, 'starter'::text, 'pro'::text, 'team'::text, 'enterprise'::text])),
  brand_id uuid,
  email text,
  stripe_customer_id text,
  subscription text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  user_id uuid NOT NULL UNIQUE,
  brand_name text NOT NULL,
  brand_bio text,
  brand_tone text,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  token_balance integer DEFAULT 0,
  last_token_refresh timestamp with time zone,
  username text,
  business_url text,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT profiles_brand_id_fkey FOREIGN KEY (brand_id) REFERENCES public.brands(id)
);
CREATE TABLE public.social_connections (
  account_name text,
  user_id uuid NOT NULL,
  provider text NOT NULL CHECK (provider = ANY (ARRAY['facebook'::text, 'instagram'::text, 'twitter'::text, 'linkedin'::text])),
  oauth_user_token text NOT NULL,
  long_lived_user_token text,
  token_expires_at timestamp with time zone,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  oauth_refresh_token text,
  account_id text,
  CONSTRAINT social_connections_pkey PRIMARY KEY (id),
  CONSTRAINT social_connections_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(user_id)
);
CREATE TABLE public.social_pages (
  connection_id uuid NOT NULL,
  user_id uuid NOT NULL,
  page_id text NOT NULL,
  page_name text NOT NULL,
  page_category text,
  page_picture_url text,
  page_access_token text NOT NULL,
  page_token_expires_at timestamp with time zone,
  page_description text,
  preferred_audience text,
  ai_extra_notes jsonb,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  page_url text,
  provider text,
  CONSTRAINT social_pages_pkey PRIMARY KEY (id),
  CONSTRAINT social_pages_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(user_id),
  CONSTRAINT social_pages_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.social_connections(id)
);
CREATE TABLE public.survey_questions (
  question_text text NOT NULL,
  question_type text NOT NULL CHECK (question_type = ANY (ARRAY['yes_no'::text, 'rating_1_5'::text, 'text'::text])),
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT survey_questions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.survey_responses (
  user_id uuid NOT NULL,
  question_id uuid NOT NULL,
  response_yes_no boolean,
  response_rating smallint CHECK (response_rating >= 1 AND response_rating <= 5),
  response_text text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT survey_responses_pkey PRIMARY KEY (id),
  CONSTRAINT survey_responses_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.survey_questions(id),
  CONSTRAINT survey_responses_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(user_id)
);
CREATE TABLE public.task_costs (
  task_type text NOT NULL UNIQUE,
  description text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  base_cost integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT task_costs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.token_transactions (
  user_id uuid NOT NULL,
  task_type text NOT NULL,
  model_id text,
  tokens_deducted integer,
  tokens_added integer,
  related_id uuid,
  notes text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT token_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT token_transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.trending_assets (
  industry text,
  topic text NOT NULL,
  snippet text NOT NULL,
  source text NOT NULL,
  embedding USER-DEFINED NOT NULL,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT trending_assets_pkey PRIMARY KEY (id)
);